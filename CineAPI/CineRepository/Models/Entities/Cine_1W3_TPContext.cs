// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CineRepository.Models.Entities;

public partial class Cine_1W3_TPContext : DbContext
{
    public Cine_1W3_TPContext(DbContextOptions<Cine_1W3_TPContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Achievement> Achievements { get; set; }

    public virtual DbSet<Actor> Actors { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingState> BookingStates { get; set; }

    public virtual DbSet<Cinema> Cinemas { get; set; }

    public virtual DbSet<Clasification> Clasifications { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<ContactType> ContactTypes { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Director> Directors { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    public virtual DbSet<MovieCast> MovieCasts { get; set; }

    public virtual DbSet<MovieDirector> MovieDirectors { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentMethodsBooking> PaymentMethodsBookings { get; set; }

    public virtual DbSet<Producer> Producers { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Screen> Screens { get; set; }

    public virtual DbSet<ScreensType> ScreensTypes { get; set; }

    public virtual DbSet<Showtime> Showtimes { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public virtual DbSet<UserAchievement> UserAchievements { get; set; }

    public virtual DbSet<UserGenreStat> UserGenreStats { get; set; }

    public virtual DbSet<UserMovieHistory> UserMovieHistories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Achievement>(entity =>
        {
            entity.HasKey(e => e.AchievementId).HasName("PK__Achievem__3C492E838F201BE2");

            entity.Property(e => e.AchievementId).HasColumnName("achievement_id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Points).HasColumnName("points");
        });

        modelBuilder.Entity<Actor>(entity =>
        {
            entity.HasKey(e => e.ActorId).HasName("PK__actors__8B2447B43E907FE8");

            entity.ToTable("actors");

            entity.Property(e => e.ActorId).HasColumnName("actor_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("date")
                .HasColumnName("birth_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__bookings__5DE3A5B10C37D4BC");

            entity.ToTable("bookings");

            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.BookingDate)
                .HasColumnType("date")
                .HasColumnName("booking_date");
            entity.Property(e => e.BookingStateId).HasColumnName("booking_state_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");

            entity.HasOne(d => d.BookingState).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.BookingStateId)
                .HasConstraintName("FK_booking_b_state");

            entity.HasOne(d => d.Customer).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_booking_customer");
        });

        modelBuilder.Entity<BookingState>(entity =>
        {
            entity.HasKey(e => e.BookingStateId).HasName("PK__booking___EB5D508B8166973B");

            entity.ToTable("booking_states");

            entity.Property(e => e.BookingStateId).HasColumnName("booking_state_id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Cinema>(entity =>
        {
            entity.HasKey(e => e.CinemaId).HasName("PK__cinemas__566287786C9D61A8");

            entity.ToTable("cinemas");

            entity.Property(e => e.CinemaId).HasColumnName("cinema_id");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("location");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Clasification>(entity =>
        {
            entity.HasKey(e => e.ClasificationId).HasName("PK__clasific__750F38F61B8F5BD5");

            entity.ToTable("clasification");

            entity.Property(e => e.ClasificationId).HasColumnName("clasification_id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.ContactId).HasName("PK__contacts__024E7A86DBDC02B2");

            entity.ToTable("contacts");

            entity.Property(e => e.ContactId).HasColumnName("contact_id");
            entity.Property(e => e.Contact1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.ContactTypeId).HasColumnName("contact_type_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");

            entity.HasOne(d => d.ContactType).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.ContactTypeId)
                .HasConstraintName("FK_contact_contact_type");

            entity.HasOne(d => d.Customer).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_contact_customer");
        });

        modelBuilder.Entity<ContactType>(entity =>
        {
            entity.HasKey(e => e.ContactTypeId).HasName("PK__contact___893E607D8F2737B4");

            entity.ToTable("contact_type");

            entity.Property(e => e.ContactTypeId).HasColumnName("contact_type_id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__customer__CD65CB852AC06639");

            entity.ToTable("customers");

            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.BornDate)
                .HasColumnType("date")
                .HasColumnName("born_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Retired).HasColumnName("retired");
        });

        modelBuilder.Entity<Director>(entity =>
        {
            entity.HasKey(e => e.DirectorId).HasName("PK__director__F5205E495E1C9CA7");

            entity.ToTable("directors");

            entity.Property(e => e.DirectorId).HasColumnName("director_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("date")
                .HasColumnName("birth_date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.GenreId).HasName("PK__genres__18428D4287A8ED85");

            entity.ToTable("genres");

            entity.Property(e => e.GenreId).HasColumnName("genre_id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.HasKey(e => e.MovieId).HasName("PK__movies__83CDF749613DF805");

            entity.ToTable("movies");

            entity.Property(e => e.MovieId).HasColumnName("movie_id");
            entity.Property(e => e.ClasificationId).HasColumnName("clasification_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.GenreId).HasColumnName("genre_id");
            entity.Property(e => e.ProducerId).HasColumnName("producer_id");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("date")
                .HasColumnName("release_date");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("title");

            entity.HasOne(d => d.Clasification).WithMany(p => p.Movies)
                .HasForeignKey(d => d.ClasificationId)
                .HasConstraintName("FK_movie_clasification");

            entity.HasOne(d => d.Genre).WithMany(p => p.Movies)
                .HasForeignKey(d => d.GenreId)
                .HasConstraintName("FK_movie_genre");

            entity.HasOne(d => d.Producer).WithMany(p => p.Movies)
                .HasForeignKey(d => d.ProducerId)
                .HasConstraintName("FK_movies_producers");
        });

        modelBuilder.Entity<MovieCast>(entity =>
        {
            entity.HasKey(e => e.MovieCastId).HasName("PK__movie_ca__00C3DA85DDEE9E17");

            entity.ToTable("movie_cast");

            entity.Property(e => e.MovieCastId).HasColumnName("movie_cast_id");
            entity.Property(e => e.ActorId).HasColumnName("actor_id");
            entity.Property(e => e.MovieId).HasColumnName("movie_id");
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("role");

            entity.HasOne(d => d.Actor).WithMany(p => p.MovieCasts)
                .HasForeignKey(d => d.ActorId)
                .HasConstraintName("FK_cast_actor");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieCasts)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_cast_movie");
        });

        modelBuilder.Entity<MovieDirector>(entity =>
        {
            entity.HasKey(e => e.MovieDirectorId).HasName("PK__movie_di__27CCC587E8724415");

            entity.ToTable("movie_directors");

            entity.Property(e => e.MovieDirectorId).HasColumnName("movie_director_id");
            entity.Property(e => e.DirectorId).HasColumnName("director_id");
            entity.Property(e => e.MovieId).HasColumnName("movie_id");

            entity.HasOne(d => d.Director).WithMany(p => p.MovieDirectors)
                .HasForeignKey(d => d.DirectorId)
                .HasConstraintName("FK_movie_director_director");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieDirectors)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_movie_director_movie");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId).HasName("PK__payment___8A3EA9EBD8729446");

            entity.ToTable("payment_methods");

            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.MethodName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("method_name");
            entity.Property(e => e.Recharge).HasColumnName("recharge");
        });

        modelBuilder.Entity<PaymentMethodsBooking>(entity =>
        {
            entity.HasKey(e => e.IdPaymentMethodsBooking).HasName("PK__payment___4FF114CC6C2938BC");

            entity.ToTable("payment_methods_booking");

            entity.Property(e => e.IdPaymentMethodsBooking).HasColumnName("id_payment_methods_booking");
            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");

            entity.HasOne(d => d.Booking).WithMany(p => p.PaymentMethodsBookings)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK_payment_method_X_booking");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PaymentMethodsBookings)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("FK_p_method_booking_p_method");
        });

        modelBuilder.Entity<Producer>(entity =>
        {
            entity.HasKey(e => e.ProducerId).HasName("PK__producer__EA7F30C8816E95D1");

            entity.ToTable("producers");

            entity.Property(e => e.ProducerId).HasColumnName("producer_id");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("company");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewId).HasName("PK__reviews__60883D90E453C063");

            entity.ToTable("reviews");

            entity.Property(e => e.ReviewId).HasColumnName("review_id");
            entity.Property(e => e.Comment)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.MovieId).HasColumnName("movie_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.UserAccountId).HasColumnName("user_account_id");

            entity.HasOne(d => d.Movie).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_review_movie");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.UserAccountId)
                .HasConstraintName("FK_review_customer");
        });

        modelBuilder.Entity<Screen>(entity =>
        {
            entity.HasKey(e => e.ScreenId).HasName("PK__screens__CC19B67AD20EFF75");

            entity.ToTable("screens");

            entity.Property(e => e.ScreenId).HasColumnName("screen_id");
            entity.Property(e => e.Capacity).HasColumnName("capacity");
            entity.Property(e => e.CinemaId).HasColumnName("cinema_id");
            entity.Property(e => e.ScreenType).HasColumnName("screen_type");

            entity.HasOne(d => d.Cinema).WithMany(p => p.Screens)
                .HasForeignKey(d => d.CinemaId)
                .HasConstraintName("FK_screen_cinema");

            entity.HasOne(d => d.ScreenTypeNavigation).WithMany(p => p.Screens)
                .HasForeignKey(d => d.ScreenType)
                .HasConstraintName("FK_screen_type_screen");
        });

        modelBuilder.Entity<ScreensType>(entity =>
        {
            entity.HasKey(e => e.ScreenTypeId).HasName("PK__screens___66979345F9C45D90");

            entity.ToTable("screens_types");

            entity.Property(e => e.ScreenTypeId).HasColumnName("screen_type_id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Showtime>(entity =>
        {
            entity.HasKey(e => e.ShowtimeId).HasName("PK__showtime__A406B51899D9CE5D");

            entity.ToTable("showtimes");

            entity.Property(e => e.ShowtimeId).HasColumnName("showtime_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("end_date");
            entity.Property(e => e.MovieId).HasColumnName("movie_id");
            entity.Property(e => e.ScreenId).HasColumnName("screen_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("date")
                .HasColumnName("start_date");

            entity.HasOne(d => d.Movie).WithMany(p => p.Showtimes)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_showtime_movie");

            entity.HasOne(d => d.Screen).WithMany(p => p.Showtimes)
                .HasForeignKey(d => d.ScreenId)
                .HasConstraintName("FK_showtime_screen");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.TicketId).HasName("PK__tickets__D596F96B3DA02E10");

            entity.ToTable("tickets");

            entity.Property(e => e.TicketId).HasColumnName("ticket_id");
            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
            entity.Property(e => e.SaleDate)
                .HasColumnType("date")
                .HasColumnName("sale_date");
            entity.Property(e => e.SeatNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("seat_number");
            entity.Property(e => e.ShowtimeId).HasColumnName("showtime_id");

            entity.HasOne(d => d.Booking).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK_ticket_booking");

            entity.HasOne(d => d.Showtime).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.ShowtimeId)
                .HasConstraintName("FK_ticket_showtime");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId).HasName("PK__user_acc__1918BBDADFDAE31C");

            entity.ToTable("user_accounts");

            entity.HasIndex(e => e.Username, "UQ__user_acc__F3DBC572DE45A4F0").IsUnique();

            entity.Property(e => e.UserAccountId).HasColumnName("user_account_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("date")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.LastLogin)
                .HasColumnType("date")
                .HasColumnName("last_login");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password_hash");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");

            entity.HasOne(d => d.Customer).WithMany(p => p.UserAccounts)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_user_account_customer");
        });

        modelBuilder.Entity<UserAchievement>(entity =>
        {
            entity.HasKey(e => e.UserAchievementId).HasName("PK__User_ach__C031722C4E27C73B");

            entity.ToTable("User_achievements");

            entity.Property(e => e.UserAchievementId).HasColumnName("user_achievement_id");
            entity.Property(e => e.AchievedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("achieved_at");
            entity.Property(e => e.AchievementId).HasColumnName("achievement_id");
            entity.Property(e => e.UserAccountId).HasColumnName("user_account_id");

            entity.HasOne(d => d.Achievement).WithMany(p => p.UserAchievements)
                .HasForeignKey(d => d.AchievementId)
                .HasConstraintName("FK_Achievements_User_Achievements");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.UserAchievements)
                .HasForeignKey(d => d.UserAccountId)
                .HasConstraintName("FK_User_Account_User_Achievements");
        });

        modelBuilder.Entity<UserGenreStat>(entity =>
        {
            entity.HasKey(e => new { e.UserAccountId, e.GenreId }).HasName("PK__User_Gen__289C930E349C49B4");

            entity.ToTable("User_Genre_Stats");

            entity.Property(e => e.UserAccountId).HasColumnName("user_account_id");
            entity.Property(e => e.GenreId).HasColumnName("genre_id");
            entity.Property(e => e.ViewCount)
                .HasDefaultValue(0)
                .HasColumnName("view_count");

            entity.HasOne(d => d.Genre).WithMany(p => p.UserGenreStats)
                .HasForeignKey(d => d.GenreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Stats_Genre");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.UserGenreStats)
                .HasForeignKey(d => d.UserAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Stats_User");
        });

        modelBuilder.Entity<UserMovieHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__User_Mov__096AA2E9323361D1");

            entity.ToTable("User_Movie_History");

            entity.Property(e => e.HistoryId).HasColumnName("history_id");
            entity.Property(e => e.MovieId).HasColumnName("movie_id");
            entity.Property(e => e.UserAccountId).HasColumnName("user_account_id");
            entity.Property(e => e.ViewedDate)
                .HasColumnType("datetime")
                .HasColumnName("viewed_date");

            entity.HasOne(d => d.Movie).WithMany(p => p.UserMovieHistories)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("FK_Movies_User_History");

            entity.HasOne(d => d.UserAccount).WithMany(p => p.UserMovieHistories)
                .HasForeignKey(d => d.UserAccountId)
                .HasConstraintName("FK_User_Account_User_History");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}